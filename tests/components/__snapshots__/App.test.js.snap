// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App Component should render the form correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DragDropContext(App) />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <App />,
      "value": Object {
        "dragDropManager": DragDropManagerImpl {
          "backend": HTML5Backend {
            "actions": Object {
              "beginDrag": [Function],
              "drop": [Function],
              "endDrag": [Function],
              "hover": [Function],
              "publishDragSource": [Function],
            },
            "altKeyPressed": false,
            "asyncEndDragFrameId": null,
            "context": Object {},
            "currentDragSourceNode": null,
            "currentDragSourceNodeOffset": null,
            "currentDragSourceNodeOffsetChanged": false,
            "currentNativeHandle": null,
            "currentNativeSource": null,
            "dragEnterTargetIds": Array [],
            "dragOverTargetIds": null,
            "dragStartSourceIds": null,
            "dropTargetIds": Array [],
            "enterLeaveCounter": EnterLeaveCounter {
              "entered": Array [],
            },
            "monitor": DragDropMonitorImpl {
              "registry": HandlerRegistryImpl {
                "dragSources": Map {},
                "dropTargets": Map {},
                "pinnedSource": null,
                "pinnedSourceId": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(observable): [Function],
                },
                "types": Map {},
              },
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
            },
            "mouseMoveTimeoutTimer": null,
            "registry": HandlerRegistryImpl {
              "dragSources": Map {},
              "dropTargets": Map {},
              "pinnedSource": null,
              "pinnedSourceId": null,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
              "types": Map {},
            },
            "sourceNodeOptions": Map {},
            "sourceNodes": Map {},
            "sourcePreviewNodeOptions": Map {},
            "sourcePreviewNodes": Map {},
          },
          "context": Object {},
          "isSetUp": false,
          "monitor": DragDropMonitorImpl {
            "registry": HandlerRegistryImpl {
              "dragSources": Map {},
              "dropTargets": Map {},
              "pinnedSource": null,
              "pinnedSourceId": null,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
              "types": Map {},
            },
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
          },
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": [Function],
      "rendered": null,
      "type": [Function],
    },
    "type": Object {
      "$$typeof": Symbol(react.provider),
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": [Circular],
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_changedBits2": 0,
        "_currentRenderer": null,
        "_currentRenderer2": null,
        "_currentValue": Object {
          "dragDropManager": undefined,
        },
        "_currentValue2": Object {
          "dragDropManager": undefined,
        },
        "_defaultValue": Object {
          "dragDropManager": undefined,
        },
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <App />,
        "value": Object {
          "dragDropManager": DragDropManagerImpl {
            "backend": HTML5Backend {
              "actions": Object {
                "beginDrag": [Function],
                "drop": [Function],
                "endDrag": [Function],
                "hover": [Function],
                "publishDragSource": [Function],
              },
              "altKeyPressed": false,
              "asyncEndDragFrameId": null,
              "context": Object {},
              "currentDragSourceNode": null,
              "currentDragSourceNodeOffset": null,
              "currentDragSourceNodeOffsetChanged": false,
              "currentNativeHandle": null,
              "currentNativeSource": null,
              "dragEnterTargetIds": Array [],
              "dragOverTargetIds": null,
              "dragStartSourceIds": null,
              "dropTargetIds": Array [],
              "enterLeaveCounter": EnterLeaveCounter {
                "entered": Array [],
              },
              "monitor": DragDropMonitorImpl {
                "registry": HandlerRegistryImpl {
                  "dragSources": Map {},
                  "dropTargets": Map {},
                  "pinnedSource": null,
                  "pinnedSourceId": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(observable): [Function],
                  },
                  "types": Map {},
                },
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(observable): [Function],
                },
              },
              "mouseMoveTimeoutTimer": null,
              "registry": HandlerRegistryImpl {
                "dragSources": Map {},
                "dropTargets": Map {},
                "pinnedSource": null,
                "pinnedSourceId": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(observable): [Function],
                },
                "types": Map {},
              },
              "sourceNodeOptions": Map {},
              "sourceNodes": Map {},
              "sourcePreviewNodeOptions": Map {},
              "sourcePreviewNodes": Map {},
            },
            "context": Object {},
            "isSetUp": false,
            "monitor": DragDropMonitorImpl {
              "registry": HandlerRegistryImpl {
                "dragSources": Map {},
                "dropTargets": Map {},
                "pinnedSource": null,
                "pinnedSourceId": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(observable): [Function],
                },
                "types": Map {},
              },
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
            },
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
          },
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": [Function],
        "rendered": null,
        "type": [Function],
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_changedBits": 0,
          "_changedBits2": 0,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": Object {
            "dragDropManager": undefined,
          },
          "_currentValue2": Object {
            "dragDropManager": undefined,
          },
          "_defaultValue": Object {
            "dragDropManager": undefined,
          },
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
